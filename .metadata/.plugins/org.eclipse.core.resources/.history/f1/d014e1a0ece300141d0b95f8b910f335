package com.totvs.hcm.tsa.markgenerator.ui.threads;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.concurrent.TimeUnit;

import javax.swing.JOptionPane;

import com.totvs.hcm.accesscontrol.util.DeviceReader;
import com.totvs.hcm.tsa.markgenerator.pojo.DeviceSimple;
import com.totvs.hcm.tsa.markgenerator.pojo.MasterConfigurationData;
import com.totvs.hcm.tsa.markgenerator.pojo.SlaveIP;
import com.totvs.hcm.tsa.markgenerator.ui.events.ExecutionSimulationDispatcher;
import com.totvs.hcm.tsa.markgenerator.ui.events.ExecutionSimulationEvent;
import com.totvs.hcm.tsa.markgenerator.ui.events.SimulateProcessDispatcher;
import com.totvs.hcm.tsa.markgenerator.ui.events.SimulateProcessEvent;
import com.totvs.hcm.tsa.markgenerator.ui.events.SimulateProcessEvent.SimulateProcessType;
import com.totvs.tsa.business.dao.TSABusinessDAOImpl;

public class ThreadSimulateManagement extends ThreadGenericCommunication implements Runnable {
	private List<ThreadSimulateData> threads = new ArrayList<ThreadSimulateData>();
	private ThreadGroup threadGroup = new ThreadGroup("Threads Simuadores Dispositivos");
	private Calendar initialTime;
	private Calendar endTime;
	private List<DeviceSimple> devices;
	private PrintWriter pw;
	private SlaveIP slave;
	private boolean processConcluded;

	public ThreadSimulateManagement(MasterConfigurationData masterConfigurationData, SlaveIP slave, List<DeviceSimple> devices) {
		super(masterConfigurationData);
		this.devices = devices;
		this.slave = slave;
		this.masterConfigurationData.setInstanceIpAddress(slave.getIpAddress());

		System.setProperty(TSABusinessDAOImpl.SPECIFIC_HOST, masterConfigurationData.getTechnicalInformationTSAServer());
		System.setProperty(TSABusinessDAOImpl.SPECIFIC_PORT, masterConfigurationData.getTechnicalInformationTSAPort() != null ? masterConfigurationData.getTechnicalInformationTSAPort() : "1099");
		System.setProperty(TSABusinessDAOImpl.SPECIFIC_USER, masterConfigurationData.getTechnicalInformationTSAUserName());
		System.setProperty(TSABusinessDAOImpl.SPECIFIC_PASSWD, masterConfigurationData.getTechnicalInformationTSAPassword());
	}

	@Override
	public void run() {
		this.stop = Boolean.FALSE;
		DeviceReader.getInstance().getDevice(0);
		this.initialTime = Calendar.getInstance();

		try {
			this.pw = new PrintWriter("stress\\" + this.slave.getIpAddress() + "_testData", "ISO-8859-1");

			this.pw.write("Tipo Mensagem;Data Ocorrencia;Cracha;Data Hora Marcacao;Mensagem;Tempo Decorrido;Instancia Escravo;Codigo Dispositivo\n");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		for (DeviceSimple device : this.devices) {
			ThreadSimulateData simulateData = new ThreadSimulateData(device, this.masterConfigurationData, this.pw);
			Thread t = new Thread(this.threadGroup, simulateData, "Thread-Disp-" + device.getDeviceCode());
			t.start();
			this.threads.add(simulateData);

			this.generateEvent();

			try {
				Thread.sleep(500);
			}
			catch(Exception e) {
			}
		}

		this.endTime = Calendar.getInstance();

		int timeExecution = 0;

		try {
			timeExecution = Integer.parseInt(this.masterConfigurationData.getTechnicalInformationSecondsExecution());
		}
		catch(NumberFormatException e) {
			this.masterConfigurationData.setTechnicalInformationSecondsExecution("0");
		}

		this.endTime.add(Calendar.SECOND, timeExecution);

		while(!this.stop) {
			if(timeExecution > 0 && Calendar.getInstance().after(this.endTime)) {
				this.stop = Boolean.TRUE;
				processConcluded = Boolean.TRUE;
			}

			this.generateEvent();

			try {
//				long totalTime = (this.endTime.getTimeInMillis() - Calendar.getInstance().getTimeInMillis());
				long totalTime = (1000);
				totalTime = (totalTime < 0 ? 0 : totalTime);

				Thread.sleep(totalTime);
			}
			catch(Exception e) {
			}
		}

		for (ThreadSimulateData thread : this.threads) {
			thread.setStop(Boolean.TRUE);
		}

		if(this.pw != null) {
			this.pw.close();
		}

		try {
			Thread.sleep(1000);
		}
		catch(Exception e) {
		}

		this.generateEvent();

		SimulateProcessDispatcher.getInstance().fireSimulateProcessEvent(new SimulateProcessEvent(this.processConcluded ? SimulateProcessType.CONCLUDED : SimulateProcessType.CANCELED));

		JOptionPane.showMessageDialog(null, "Processo de simulação " + (this.processConcluded ? "finalizado" : "cancelado") + ", verifique os arquivos de LOG gerado para análise dos tempos.", "Operação Concluída", JOptionPane.INFORMATION_MESSAGE);
	}

	private void generateEvent() {
		long secondsInExecution = TimeUnit.SECONDS.convert((Calendar.getInstance().getTimeInMillis() - this.initialTime.getTimeInMillis()), TimeUnit.MILLISECONDS);
		int threadsInExecution = this.threadGroup.activeCount();

		ExecutionSimulationDispatcher.getInstance().fireMasterConfigurationDataReceived(new ExecutionSimulationEvent(threadsInExecution, secondsInExecution));
	}

	@Override
	public void setStop(Boolean stop) {
		if(this.stop != stop && stop) {
			this.processConcluded = Boolean.FALSE;
		}

		super.setStop(stop);
	}

	public ThreadGroup getThreadGroup() {
		return threadGroup;
	}
}
