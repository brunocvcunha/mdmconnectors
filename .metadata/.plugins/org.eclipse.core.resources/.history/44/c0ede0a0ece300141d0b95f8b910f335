package com.totvs.hcm.tsa.markgenerator.ui.threads;

import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;

import com.totvs.hcm.tsa.markgenerator.pojo.MasterConfigurationData;

public abstract class ThreadGenericCommunication {
	protected MasterConfigurationData masterConfigurationData;
	protected Boolean stop = Boolean.TRUE;
	protected Socket socket;
	protected ObjectInputStream ois;
	protected ObjectOutputStream oos;

	public ThreadGenericCommunication(MasterConfigurationData masterConfigurationData) {
		this.masterConfigurationData = masterConfigurationData;
	}

	public void send() throws IOException {
		if(oos != null) {
			if(this.masterConfigurationData != null) {
				try {
					oos.writeUnshared(this.masterConfigurationData);
					System.out.println("Informação enviada (" + this.socket.getInetAddress().getHostName() + ":" + this.socket.getPort() + "): " + this.masterConfigurationData);
					oos.reset();
					this.masterConfigurationData = null;
				} catch (SocketTimeoutException e) {
				} catch (IOException e) {
					throw e;
				}
			}
			else {
				System.out.println("Nenhuma informação para enviar (" + this.socket.getInetAddress().getHostName() + ":" + this.socket.getPort() + ").");
			}
		}
	}

	public MasterConfigurationData listen() throws IOException {
		try {
			if(this.ois == null) {
				InputStream inputStream = this.socket.getInputStream();
				this.ois = new ObjectInputStream(inputStream);
			}

			Object readObject = this.ois.readUnshared();

			if(readObject instanceof MasterConfigurationData) {
				System.out.println("Mensagem recebida: " + readObject);

				try {
					this.ois.reset();
				}
				catch(IOException e) {
				}

				return (MasterConfigurationData) readObject;
			}
		} catch(EOFException e) {
			this.setStop(Boolean.TRUE);
		} catch(SocketException e) {	
			this.setStop(Boolean.TRUE);
		} catch(SocketTimeoutException e) {
		} catch(ClassNotFoundException e) {
		} catch(IOException e) {
			e.printStackTrace();
		}

		return null;
	}

	public Boolean getStop() {
		return stop;
	}

	public MasterConfigurationData getMasterConfigurationData() {
		return masterConfigurationData;
	}

	public void setMasterConfigurationData(MasterConfigurationData masterConfigurationData) {
		this.masterConfigurationData = masterConfigurationData;
	}

	public void setStop(Boolean stop) {
		if(stop == true) {
			try {
				if(this.socket != null)
					this.socket.close();
			} catch (IOException e) {
			}
		}

		this.stop = stop;
	}
}
