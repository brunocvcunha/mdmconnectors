package com.totvs.hcm.tsa.markgenerator.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JRadioButton;

import com.totvs.hcm.tsa.markgenerator.pojo.MasterConfigurationData;
import com.totvs.hcm.tsa.markgenerator.pojo.InstanceTypeEnum;
import com.totvs.hcm.tsa.markgenerator.ui.events.InstanceTypeEvent;
import com.totvs.hcm.tsa.markgenerator.ui.events.InstanceTypeListener;

public class PanelConfiguration extends PanelAbstract {
	private static final long serialVersionUID = 1L;

	private JRadioButton radioMaster;
	private JRadioButton radioSlave;
	private ButtonGroup radioGroup;

	private List<InstanceTypeListener> listeners = new ArrayList<InstanceTypeListener>();

	public PanelConfiguration(){
		super(2, 1, "Forma Operação");

		this.radioMaster = new JRadioButton("Mestre");
		this.radioSlave = new JRadioButton("Escravo");
		this.radioGroup = new ButtonGroup();

		EventClickRadio eventListener = new EventClickRadio();
		this.radioMaster.addActionListener(eventListener);
		this.radioSlave.addActionListener(eventListener);

		this.radioGroup.add(this.radioMaster);
		this.radioGroup.add(this.radioSlave);

//		this.radioMaster.setSelected(true);

		this.initializeLayout();
	}

	public void initializeLayout() {
		this.add(new JComponent[] {this.radioMaster, this.radioSlave});
	}

	@Override
	public void fillData(MasterConfigurationData masterConfigurationData) {
		if(masterConfigurationData != null) {
			masterConfigurationData.setInstanceTypeEnum(this.radioMaster.isSelected() ? InstanceTypeEnum.MASTER : (this.radioSlave.isSelected() ? InstanceTypeEnum.SLAVE : InstanceTypeEnum.MASTER));
		}
	}

	@Override
	public void fillComponents(MasterConfigurationData masterConfigurationData) {
		//nao faz nada senao transforma em master.
	}

	public void addInstanceTypeListener(InstanceTypeListener instanceTypeListener) {
		this.listeners.add(instanceTypeListener);
	}

	public void removeInstanceTypeListener(InstanceTypeListener instanceTypeListener) {
		this.listeners.remove(instanceTypeListener);
	}

	private void fireInstanceTypeEvent(InstanceTypeEvent event) {
		if(listeners != null) {
			for (InstanceTypeListener listener : listeners) {
				listener.onChangeInstanceType(event);
			}
		}
	}

	@Override
	public void disableFields() {
	}

	@Override
	public void enableFields() {
	}

	public void disableFieldsAndLock() {
		super.disableFields();
	}

	public class EventClickRadio implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent arg0) {
			InstanceTypeEnum instanceTypeEnum = (radioMaster.isSelected() ? InstanceTypeEnum.MASTER : (radioSlave.isSelected() ? InstanceTypeEnum.SLAVE : null));
			InstanceTypeEvent event = new InstanceTypeEvent(instanceTypeEnum);

			fireInstanceTypeEvent(event);
		}
	}
}
