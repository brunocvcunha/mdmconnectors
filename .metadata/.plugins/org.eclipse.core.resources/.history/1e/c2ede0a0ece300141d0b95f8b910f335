package com.totvs.hcm.tsa.markgenerator.ui.threads;

import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;

import com.datasul.hr.controleAcesso.db.BusinessDAOFactory;
import com.datasul.hr.controleAcesso.db.comando.CommandType;
import com.datasul.hr.controleAcesso.exception.DatabaseException;
import com.totvs.hcm.accesscontrol.server.ServerI;
import com.totvs.hcm.accesscontrol.server.exceptions.GenericException;
import com.totvs.hcm.accesscontrol.util.DeviceReader;
import com.totvs.hcm.accesscontrol.vo.DefaultAccessDirectionEnum;
import com.totvs.hcm.accesscontrol.vo.DefaultAccessTypeEnum;
import com.totvs.hcm.accesscontrol.vo.DefaultDeviceVO;
import com.totvs.hcm.accesscontrol.vo.DefaultMasterCardLiberationVO;
import com.totvs.hcm.accesscontrol.vo.DefaultUserVO;
import com.totvs.hcm.accesscontrol.vo.RequestTypeEnum;
import com.totvs.hcm.accesscontrol.vo.RequestVO;
import com.totvs.hcm.tsa.markgenerator.pojo.DeviceSimple;
import com.totvs.hcm.tsa.markgenerator.pojo.MasterConfigurationData;
import com.totvs.hcm.tsa.markgenerator.pojo.ResultSimulationData;
import com.totvs.hcm.tsa.markgenerator.pojo.ResultSimulationData.ResultSimulationType;
import com.totvs.hcm.tsa.markgenerator.pojo.UserSimple;
import com.totvs.tsa.business.dao.command.jpa.TSACommandCommitAccessJPA;

public class ThreadSimulateData extends ThreadGenericCommunication implements Runnable {
	private DeviceSimple device;
	private PrintWriter pw;

	public ThreadSimulateData(DeviceSimple device, MasterConfigurationData masterConfigurationData, PrintWriter pw) {
		super(masterConfigurationData);
		this.device = device;
		this.pw = pw;
	}

	@Override
	public void run() {
		this.stop = Boolean.FALSE;
		ServerI device = DeviceReader.getInstance().getDevice(this.device.getDeviceCode());
		DefaultDeviceVO deviceVO = device.getType().getDeviceVO();

		this.generateLogMessage(null, null, "Iniciando geração de marcações.", null, masterConfigurationData.getInstanceIpAddress(), deviceVO.getNumber(), ResultSimulationType.BEGIN_PROCESS);

		while(!stop) {
			this.generateData(deviceVO);
		}

		this.generateLogMessage(null, null, "Encerrando geração de marcações (solicitação de parada)", null, masterConfigurationData.getInstanceIpAddress(), deviceVO.getNumber(), ResultSimulationType.INTERRUPTED_PROCESS);
	}

	private void generateLogMessage(String cardCode, Date dateMark, String message, Long totalTime, String slaveIp, Integer deviceCode, ResultSimulationType type) {
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
		ResultSimulationData simulationData = new ResultSimulationData(new Date(), cardCode, dateMark, message, totalTime, slaveIp, deviceCode, type);

		if(this.pw != null && !this.pw.checkError()) {
			this.pw.write(simulationData.getType() + ";" +
					df.format(simulationData.getOcorrenceDate()) + ";" +
					(simulationData.getCardCode() != null ? simulationData.getCardCode() : "") + ";" +
					(simulationData.getDateMark() != null ? df.format(simulationData.getDateMark()) : "") + ";" +
					simulationData.getMessage() + ";" +
					(simulationData.getTotalTime() != null ? simulationData.getTotalTime() : "") + ";" +
					simulationData.getSlaveIp() + ";" +
					simulationData.getDeviceCode() + "\n");
		}
	}

	private void generateData(DefaultDeviceVO deviceVO) {
		List<UserSimple> usersAvailable = this.device.getUsersAvailable();

		if(usersAvailable.size() == 0) {
			this.generateLogMessage("", null, "Dispositivo não possui usuários, encerrando execução", null, this.masterConfigurationData.getInstanceIpAddress(), this.device.getDeviceCode(), ResultSimulationType.ERROR);
			this.stop = Boolean.TRUE;

			return;
		}

		long initialTimeAllUSersDevice = System.currentTimeMillis();

		Calendar calendarInitial = Calendar.getInstance();
		Calendar calendarEnd = Calendar.getInstance();

		Date markInitialDate = masterConfigurationData.getMarkInitialDate();
		Date markEndDate = masterConfigurationData.getMarkEndDate();

		calendarInitial.setTime(markInitialDate);
		calendarEnd.setTime(markEndDate);

		itDate:
		while(calendarEnd.after(calendarInitial)) {
			for (UserSimple userSimple : usersAvailable) {
				Date markInitialTime = this.masterConfigurationData.getMarkInitialTime();
				Date markEndTime = this.masterConfigurationData.getMarkEndTime();
				
				Calendar markInitialCalend = Calendar.getInstance();
				Calendar markEndCalend = Calendar.getInstance();
				
				markInitialCalend.setTime(markInitialTime);
				markEndCalend.setTime(markEndTime);
				
				int initialTimeHour = markInitialCalend.get(Calendar.HOUR_OF_DAY);
				int endTimeHour = markEndCalend.get(Calendar.HOUR_OF_DAY);
				int differenceHour = endTimeHour - initialTimeHour;
				int sizeJourney = differenceHour / 4;

				int initialTimeMinute = markInitialCalend.get(Calendar.MINUTE);
				int endTimeMinute = markEndCalend.get(Calendar.MINUTE);

				for(int i=0; i<4; i++) {
					long initialTime = System.currentTimeMillis();

					int randTimeHour = this.randInt((sizeJourney*i), (sizeJourney*(i+1)));
					int randTimeMinute = this.randInt((randTimeHour == initialTimeHour ? initialTimeMinute : 0), (randTimeHour == endTimeHour ? endTimeMinute : 59));

					String cardCode = userSimple.getCardCode();
					DefaultUserVO defaultUserVO = null;

					Calendar calendDate = Calendar.getInstance();
					calendDate.setTime(calendarInitial.getTime());
					calendDate.set(Calendar.HOUR_OF_DAY, randTimeMinute);
					calendDate.set(Calendar.MINUTE, randTimeMinute);
					calendDate.set(Calendar.SECOND, 0);
					calendDate.set(Calendar.MILLISECOND, 0);

					Date date = calendDate.getTime();

					try {
						defaultUserVO = BusinessDAOFactory.getDAO().getUserByCardCodeDate(deviceVO.getNumber(), cardCode, date);
						defaultUserVO.getMainCard().setDefaultUserVO(defaultUserVO);
					} catch (GenericException e) {
						this.generateLogMessage(cardCode, date, e.getMessage(), null, masterConfigurationData.getInstanceIpAddress(), deviceVO.getNumber(), ResultSimulationType.ERROR);
						continue;
					}

					RequestVO requestVO = new RequestVO();
					requestVO.setAccessTypeEnum(this.device.getRep() ? DefaultAccessTypeEnum.BATCH : DefaultAccessTypeEnum.ALLOWED);
					requestVO.setCardCode(cardCode);
					requestVO.setCommandTypeEnum(CommandType.CommitAcces);
					requestVO.setDateAccess(calendDate.getTime());
					requestVO.setDefaultUserCardVO(defaultUserVO.getMainCard());
					requestVO.setDefaultUserVO(defaultUserVO);
					requestVO.setDeviceNetworkAddress(deviceVO.getNetworkAddress());
					requestVO.setDeviceNumber(deviceVO.getNumber().toString());
					requestVO.setDeviceREPNumber(null);
					requestVO.setDirectionEnum(this.device.getRep() ? DefaultAccessDirectionEnum.WITHOUT_DIRECTION : ((i+1)%2==0 ? DefaultAccessDirectionEnum.ENTRANCE : DefaultAccessDirectionEnum.EXIT));
					requestVO.setMasterCardLiberationVO(new DefaultMasterCardLiberationVO());
					requestVO.setNsrNumber(null);
					requestVO.setRequestTypeEnum(RequestTypeEnum.DeviceCardCommitOnly);

					TSACommandCommitAccessJPA tcca = new TSACommandCommitAccessJPA(requestVO);

					try {
						BusinessDAOFactory.getDAO().executeCommand(tcca);

						this.generateLogMessage(cardCode, date, "Marcação registrada", (System.currentTimeMillis() - initialTime), masterConfigurationData.getInstanceIpAddress(), deviceVO.getNumber(), ResultSimulationType.MARK_OK);
					} catch (DatabaseException e) {
						this.generateLogMessage(cardCode, date, e.getMessage(), null, masterConfigurationData.getInstanceIpAddress(), deviceVO.getNumber(), ResultSimulationType.ERROR);
					}

					if(this.stop) {
						break itDate;
					}

					int timeInterval = 1;

					try {
						timeInterval = Integer.parseInt(masterConfigurationData.getTechnicalInformationSecondsInterval());
					}
					catch(Exception e) {
					}

					try {
						Thread.sleep(timeInterval);
					} catch (InterruptedException e) {
					}
				}

				if(this.stop) {
					break itDate;
				}
			}

			if(this.stop) {
				break itDate;
			}

			calendarInitial.add(Calendar.DAY_OF_MONTH, 1);
		}

		this.generateLogMessage(null, null, "Finalizado processo para todos usuários do dispositivo (" + (this.stop ? "forçado" : "normal") + ")", (System.currentTimeMillis() - initialTimeAllUSersDevice), masterConfigurationData.getInstanceIpAddress(), deviceVO.getNumber(), ResultSimulationType.END_PROCESS);
	}

	public int randInt(int min, int max) {
	    Random rand = new Random();
	    int randomNum = rand.nextInt((max - min) + 1) + min;

	    return randomNum;
	}
}
