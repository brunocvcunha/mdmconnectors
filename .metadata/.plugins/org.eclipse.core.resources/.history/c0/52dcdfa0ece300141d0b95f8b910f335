package com.totvs.hcm.tsa.markgenerator.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextField;

import com.totvs.hcm.tsa.markgenerator.pojo.MasterConfigurationData;
import com.totvs.hcm.tsa.markgenerator.pojo.SlaveIP;
import com.totvs.hcm.tsa.markgenerator.ui.events.TSAServerStateChangedEvent;
import com.totvs.hcm.tsa.markgenerator.ui.events.TSAServerStateChangedListener;
import com.totvs.hcm.tsa.markgenerator.ui.events.TSAServerStatusException;
import com.totvs.hcm.tsa.markgenerator.ui.events.ThreadsSlavesDevicesChangedDispatcher;
import com.totvs.hcm.tsa.markgenerator.ui.events.ThreadsSlavesDevicesChangedEvent;

public class PanelSystemInformation extends PanelAbstract {
	private static final long serialVersionUID = 1L;

	private JLabel labelSlaveIPs;
	private List<SlaveIP> listaData;
	private JList<SlaveIP> listSlaves;
	private JScrollPane scrollPane;
	private JButton buttonAddIPSlave;
	private JButton buttonDelIPSlave;
	private JPanel panelSlaves;
	private JPanel panelSlavesButtons;

	private JLabel labelThreadsSlaves;
	private JPanel panelThreads;
	private JTextField textThreadsSlaves;
	private JLabel labelActualThreads;

	private JLabel labelExecutionTime;
	private JTextField textExecutionTime;
	private JPanel panelExecutionTime;
	private JLabel labelExecutionTimeProgress;

	private JLabel labelExecutionInterval;
	private JTextField textExecutionInterval;
	private JLabel labelTSAServerIPAddress;
	private JTextField textTSAServerIPAddress;
	private JLabel labelTSAServerIPPort;
	private JTextField textTSAServerIPPort;
	private JLabel labelTSAServerUserName;
	private JTextField textTSAServerUserName;
	private JLabel labelTSAServerPassword;
	private JTextField textTSAServerPassword;
	private JButton buttonConnectDisconnect;

	private List<TSAServerStateChangedListener> listenersTSAServerStatusChanged = new ArrayList<TSAServerStateChangedListener>();

	public PanelSystemInformation(){
		super(3, 20, " Informações Técnicas ");

		panelSlaves = new JPanel(new BorderLayout());
		this.listaData = new ArrayList<SlaveIP>();
		this.listaData.add(new SlaveIP("127.0.0.1", true, true));
		this.labelSlaveIPs = new JLabel("IPs Escravos: ");
		this.listSlaves = new JList<SlaveIP>(listaData.toArray(new SlaveIP[0]));
		this.listSlaves.setFont(new Font("Courier", Font.PLAIN, 12));
		this.scrollPane = new JScrollPane();
		this.scrollPane.setViewportView(this.listSlaves);

		this.panelSlavesButtons = new JPanel(new GridLayout(0, 1));
		this.buttonAddIPSlave = new JButton("+");
		this.buttonDelIPSlave = new JButton("-");

		this.buttonAddIPSlave.addActionListener(new ListEvent(ListEvent.ACTION_ADD, this, this.listSlaves));
		this.buttonDelIPSlave.addActionListener(new ListEvent(ListEvent.ACTION_DEL, this, this.listSlaves));

		this.panelSlavesButtons.add(buttonAddIPSlave);
		this.panelSlavesButtons.add(buttonDelIPSlave);
		this.panelSlaves.add(this.scrollPane, BorderLayout.CENTER);
		this.panelSlaves.add(this.panelSlavesButtons, BorderLayout.EAST);

		this.labelThreadsSlaves = new JLabel("Threads por Escravo: ");
		this.textThreadsSlaves = new JTextField(20);
		this.labelActualThreads = new JLabel(" 0 threads ativas");
		this.labelActualThreads.setForeground(Color.RED);
		this.fieldsToNotDisable.add(this.labelActualThreads);
		this.panelThreads = new JPanel(new GridLayout(0, 2));
		this.panelThreads.add(textThreadsSlaves);
		this.panelThreads.add(labelActualThreads);
		this.enableDisableField(this.labelThreadsSlaves, false);
		this.enableDisableField(this.textThreadsSlaves, false);

		this.labelExecutionTime = new JLabel("Segundos Execução: ");
		this.textExecutionTime = new JTextField("0", 20);
		this.panelExecutionTime = new JPanel(new GridLayout(0, 2));
		this.labelExecutionTimeProgress = new JLabel(" 0 segundos");
		this.labelExecutionTimeProgress.setForeground(Color.RED);
		this.fieldsToNotDisable.add(this.labelExecutionTimeProgress);
		this.panelExecutionTime.add(this.textExecutionTime);
		this.panelExecutionTime.add(this.labelExecutionTimeProgress);

		this.labelExecutionInterval = new JLabel("Segundos Intervalo Marcações: ");
		this.textExecutionInterval = new JTextField("1", 20);
		this.labelTSAServerIPAddress = new JLabel("Servidor TSA: ");
		this.textTSAServerIPAddress = new JTextField("robson-poffo", 20);
		this.labelTSAServerIPPort = new JLabel("Porta TSA: ");
		this.textTSAServerIPPort = new JTextField("1099", 20);
		this.labelTSAServerUserName = new JLabel("Usuário TSA: ");
		this.textTSAServerUserName = new JTextField("dvc", 20);
		this.labelTSAServerPassword = new JLabel("Senha TSA: ");
		this.textTSAServerPassword = new JPasswordField("123", 20);
		this.buttonConnectDisconnect = new JButton("Conectar");
		this.buttonConnectDisconnect.addActionListener(new ConnectDisconnectTSA());

		this.initializeLayout();
	}

	public void initializeLayout() {
		this.add(this.labelTSAServerIPAddress);
		this.add(this.textTSAServerIPAddress);
		this.add(this.labelTSAServerIPPort);
		this.add(this.textTSAServerIPPort);
		this.add(this.labelTSAServerUserName);
		this.add(this.textTSAServerUserName);
		this.add(this.labelTSAServerPassword);
		this.add(this.textTSAServerPassword);
		this.add(this.buttonConnectDisconnect);
		this.add(this.labelSlaveIPs); //, this.cc.xyw(2, 2, 3)
		this.add(new JComponent[] {this.panelSlaves}, 4);
		this.add(this.labelThreadsSlaves);
		this.add(this.panelThreads);
		this.add(this.labelExecutionTime);
		this.add(this.panelExecutionTime);
		this.add(this.labelExecutionInterval);
		this.add(this.textExecutionInterval);
	}

	public class ListEvent implements ActionListener {
		public final static int ACTION_ADD = 0;
		public final static int ACTION_DEL = 1;

		private PanelAbstract panel;
		private Component component;
		private int action;

		public ListEvent(int action, PanelAbstract panel, Component component) {
			this.action = action;
			this.panel = panel;
			this.component = component;
		}

		@Override
		public void actionPerformed(ActionEvent arg0) {
			SlaveIP selectedValue = listSlaves.getSelectedValue();

			if(action == ACTION_DEL) {
				if(listSlaves.getSelectedValue() != null) {
					if(selectedValue.getMasterInstance() != null && !selectedValue.getMasterInstance()) {
						listaData.remove(listSlaves.getSelectedValue());
						listSlaves.setListData(listaData.toArray(new SlaveIP[0]));
						
						fireDataChangedEvent(generateEvent(component, panel));
					}
				}
			}
			else if(action == ACTION_ADD) {
				String slaveIPAddress = JOptionPane.showInputDialog(null, "Digite o IP do escravo a ser adicionado: ", "Adicionar IP", JOptionPane.QUESTION_MESSAGE);
				
				if(slaveIPAddress != null && slaveIPAddress.trim().length() > 0) {
					listaData.add(new SlaveIP(slaveIPAddress.trim(), false));
					listSlaves.setListData(listaData.toArray(new SlaveIP[0]));
					
					fireDataChangedEvent(generateEvent(component, panel));
				}
			}
			
			ThreadsSlavesDevicesChangedDispatcher.getInstance().fireThreadsSlavesDevicesChangedEvent(new ThreadsSlavesDevicesChangedEvent());
		}
	}

	public void addTSAServerStateChangedListener(TSAServerStateChangedListener listener) {
		this.listenersTSAServerStatusChanged.add(listener);
	}

	public void removeTSAServerStateChangedListener(TSAServerStateChangedListener listener) {
		this.listenersTSAServerStatusChanged.remove(listener);
	}

	public void fireTSAServerStateChanged(TSAServerStateChangedEvent event) throws TSAServerStatusException {
		for (TSAServerStateChangedListener listener : this.listenersTSAServerStatusChanged) {
			listener.onTSAServerStateChanged(event);
		}
	}

	public class ConnectDisconnectTSA implements ActionListener {
		private int actualState = TSAServerStateChangedEvent.STATE_DISCONNECT;

		public ConnectDisconnectTSA() {
			updateLabels();
		}

		@Override
		public void actionPerformed(ActionEvent event) {
			TSAServerStateChangedEvent newEvent = null;

			try {
				String hostName = textTSAServerIPAddress.getText();
				String portString = textTSAServerIPPort.getText();
				String userName = textTSAServerUserName.getText();
				String password = textTSAServerPassword.getText();
				Integer portNumber = 1090;

				try {
					portNumber = Integer.parseInt(portString);
				}
				catch(NumberFormatException e) {
				}

				if(this.actualState == TSAServerStateChangedEvent.STATE_DISCONNECT) {
					newEvent = new TSAServerStateChangedEvent(TSAServerStateChangedEvent.STATE_CONNECT, hostName, portNumber, userName, password);
				}
				else if(this.actualState == TSAServerStateChangedEvent.STATE_CONNECT) {
					newEvent = new TSAServerStateChangedEvent(TSAServerStateChangedEvent.STATE_DISCONNECT, hostName, portNumber, userName, password);
				}

				fireTSAServerStateChanged(newEvent);

				this.actualState = newEvent.getStateChanged();

				updateLabels();
			} catch (TSAServerStatusException e) {
				JOptionPane.showMessageDialog(null, "Ocorreu um erro ao efetuar conexão com o servidor do TSA: " + e.getMessage(), "Erro Conexão TSA", JOptionPane.ERROR_MESSAGE);
			}
		}

		public void updateLabels() {
			if(this.actualState == TSAServerStateChangedEvent.STATE_DISCONNECT) {
				buttonConnectDisconnect.setText("Conectar");

				disableEnableTSAFields(true);
			}
			else if(this.actualState == TSAServerStateChangedEvent.STATE_CONNECT) {
				buttonConnectDisconnect.setText("Desconectar");

				disableEnableTSAFields(false);
			}
		}

		private void disableEnableTSAFields(boolean enabled) {
			enableDisableField(labelTSAServerIPAddress, enabled);
			enableDisableField(textTSAServerIPAddress, enabled);
			enableDisableField(labelTSAServerIPPort, enabled);
			enableDisableField(textTSAServerIPPort, enabled);
			enableDisableField(labelTSAServerUserName, enabled);
			enableDisableField(textTSAServerUserName, enabled);
			enableDisableField(labelTSAServerPassword, enabled);
			enableDisableField(textTSAServerPassword, enabled);
		}
	}

	public Set<String> getSlavesIPs() {
		Set<String> hashSet = new HashSet<String>();

		for(SlaveIP slavesIPs : this.listaData) {
			hashSet.add(slavesIPs.getIpAddress());
		}

		return hashSet;
	}

	public List<SlaveIP> getListaData() {
		return listaData;
	}

	@Override
	public void fillComponents(MasterConfigurationData masterConfigurationData) {
		if(masterConfigurationData != null) {
			this.listaData.clear();

			if(masterConfigurationData.getTechnicalInformationSlaves() != null) {
				this.listaData.addAll(masterConfigurationData.getTechnicalInformationSlaves());
			}

			this.listSlaves.setListData(this.listaData.toArray(new SlaveIP[0]));

			this.textExecutionTime.setText(masterConfigurationData.getTechnicalInformationSecondsExecution());
			this.textExecutionInterval.setText(masterConfigurationData.getTechnicalInformationSecondsInterval());
			this.textThreadsSlaves.setText(masterConfigurationData.getTechnicalInformationThreadsNumber());
			this.textTSAServerIPAddress.setText(masterConfigurationData.getTechnicalInformationTSAServer());
			this.textTSAServerIPPort.setText(masterConfigurationData.getTechnicalInformationTSAPort());
			this.textTSAServerUserName.setText(masterConfigurationData.getTechnicalInformationTSAUserName());
			this.textTSAServerPassword.setText(masterConfigurationData.getTechnicalInformationTSAPassword());
		}
	}

	@Override
	public void fillData(MasterConfigurationData masterConfigurationData) {
		if(masterConfigurationData != null) {
			masterConfigurationData.setTechnicalInformationSlaves(this.getListaData());
			masterConfigurationData.setTechnicalInformationSecondsExecution(this.textExecutionTime.getText());
			masterConfigurationData.setTechnicalInformationSecondsInterval(this.textExecutionInterval.getText());
			masterConfigurationData.setTechnicalInformationThreadsNumber(this.textThreadsSlaves.getText());
			masterConfigurationData.setTechnicalInformationTSAPort(this.textTSAServerIPPort.getText());
			masterConfigurationData.setTechnicalInformationTSAServer(this.textTSAServerIPAddress.getText());
			masterConfigurationData.setTechnicalInformationTSAUserName(this.textTSAServerUserName.getText());
			masterConfigurationData.setTechnicalInformationTSAPassword(this.textTSAServerPassword.getText());
		}
	}

	public JTextField getTextThreadsSlaves() {
		return textThreadsSlaves;
	}

	public JButton getButtonConnectDisconnect() {
		return buttonConnectDisconnect;
	}

	public JLabel getLabelActualThreads() {
		return labelActualThreads;
	}

	public JLabel getLabelExecutionTimeProgress() {
		return labelExecutionTimeProgress;
	}

	public void updateList() {
		int selectedIndex = this.listSlaves.getSelectedIndex();
		this.listSlaves.setListData(this.listaData.toArray(new SlaveIP[0]));
		this.listSlaves.setSelectedIndex(selectedIndex);
	}
}
